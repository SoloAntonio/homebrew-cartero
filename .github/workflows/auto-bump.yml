name: Auto Bump Cask Versions

on:
  schedule:
    - cron: '0 12 * * *'
  workflow_dispatch:
    inputs:
      tap_name:
        description: 'Tap name (e.g., SoloAntonio/cartero)'
        required: false
        default: 'SoloAntonio/cartero'
      tap_url:
        description: 'Tap URL'
        required: false
        default: 'https://github.com/SoloAntonio/homebrew-cartero'
      casks:
        description: 'Cask names to check (space separated, leave empty for all)'
        required: false
        default: ''

env:
  TAP_NAME: ${{ github.event.inputs.tap_name || 'SoloAntonio/cartero' }}
  TAP_URL: ${{ github.event.inputs.tap_url || 'https://github.com/SoloAntonio/homebrew-cartero' }}

jobs:
  auto-bump:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure jq is available
        run: brew install jq

      - name: Set up Homebrew and tap
        run: |
          echo "Using tap: ${{ env.TAP_NAME }} (${{ env.TAP_URL }})"
          brew update
          brew tap "${{ env.TAP_NAME }}" "${{ env.TAP_URL }}"

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: echo "$GH_TOKEN"
      - name: Find casks to check
        id: find_casks
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

          if [ -n "${{ github.event.inputs.casks }}" ]; then
            echo "Checking specified casks: ${{ github.event.inputs.casks }}"
            echo "casks=$(echo '${{ github.event.inputs.casks }}' | tr ' ' '\n' | jq -R . | jq -cs .)" >> $GITHUB_OUTPUT
          else
            CASKS=$(find Casks -name "*.rb" -exec basename {} .rb \;)
            echo "Found casks to check: $CASKS"
            echo "casks=$(echo "$CASKS" | jq -R . | jq -cs .)" >> $GITHUB_OUTPUT
          fi

      - name: Process casks
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          CASKS: ${{ steps.find_casks.outputs.casks }}
        run: |
          echo "$CASKS" | jq -r '.[]' | while read -r CASK_NAME; do
            echo "Processing: $CASK_NAME"
            CASK_PATH="Casks/$CASK_NAME.rb"

            CURRENT_VERSION=$(grep -m 1 'version "' "$CASK_PATH" | awk -F'"' '{print $2}')
            LIVECHECK_JSON=$(brew livecheck --cask --quiet --newer-only --full-name --json "$CASK_NAME")

            LATEST_VERSION=$(echo "$LIVECHECK_JSON" | jq -r '.[0].version.latest // empty')

            if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" == "$CURRENT_VERSION" ]; then
              echo "No update needed for $CASK_NAME"
              continue
            fi

            BRANCH="bump-$CASK_NAME-$LATEST_VERSION"
            git checkout -b "$BRANCH" || git checkout "$BRANCH"

            cp "$CASK_PATH" "$CASK_PATH.bak"

            brew fetch --cask "$CASK_NAME" --force --quiet > fetch.log 2>&1
            ARM_SHA=$(grep -A1 "arm64_monterey" fetch.log | grep "SHA256:" | awk '{print $2}')
            INTEL_SHA=$(grep -A1 "x86_64_monterey" fetch.log | grep "SHA256:" | awk '{print $2}')

            sed -i '' "s/version \".*\"/version \"$LATEST_VERSION\"/" "$CASK_PATH"
            sed -i '' "s/sha256 arm: *\".*\"/sha256 arm:   \"$ARM_SHA\"/" "$CASK_PATH"
            sed -i '' "s/intel: *\".*\"/intel: \"$INTEL_SHA\"/" "$CASK_PATH"

            brew uninstall --cask "$CASK_NAME" || true
            if brew install --cask "$CASK_NAME"; then
              git add "$CASK_PATH"
              git commit -m "$CASK_NAME: Update to version $LATEST_VERSION"
              git push origin "$BRANCH"

              PR_BODY="Auto-bumped $CASK_NAME to $LATEST_VERSION"
              PR_URL=$(gh pr create --title "$CASK_NAME: Update to version $LATEST_VERSION" \
                                    --body "$PR_BODY" \
                                    --base main \
                                    --head "$BRANCH")
              echo "PR created: $PR_URL"

              PR_NUMBER=$(basename "$PR_URL")
              if gh pr view "$PR_NUMBER" --json mergeable | grep -q '"mergeable": true'; then
                gh pr merge "$PR_NUMBER" --auto --merge
              else
                echo "PR not auto-mergeable"
              fi
            else
              echo "Install failed for $CASK_NAME. Reverting..."
              mv "$CASK_PATH.bak" "$CASK_PATH"
              git checkout main
              git branch -D "$BRANCH"
            fi
            git checkout main
          done
          