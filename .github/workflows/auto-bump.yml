name: Auto Bump Cask Versions

on:
  schedule:
    - cron: '0 12 * * *'  # Runs daily at 12:00 UTC
  workflow_dispatch:
    inputs:
      tap_name:
        description: 'Tap name (e.g., SoloAntonio/cartero)'
        required: false
        default: 'soloantonio/cartero'
      tap_url:
        description: 'Tap URL'
        required: false
        default: 'https://github.com/SoloAntonio/homebrew-cartero'
      casks:
        description: 'Cask names to check (space separated, leave empty for all)'
        required: false
        default: ''

env:
  TAP_NAME: ${{ github.event.inputs.tap_name || 'soloantonio/cartero' }}
  TAP_URL: ${{ github.event.inputs.tap_url || 'https://github.com/SoloAntonio/homebrew-cartero' }}

jobs:
  auto-bump:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Setup Homebrew tap
        run: |
          echo "Using tap: ${{ env.TAP_NAME }} (${{ env.TAP_URL }})"
          brew tap ${{ env.TAP_NAME }} ${{ env.TAP_URL }}
          brew developer on

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -z "$GH_TOKEN" ]; then
            echo "::error::GH_TOKEN is not set"
            exit 1
          fi
          gh auth status || gh auth login --with-token <<< "$GH_TOKEN"

      - name: Find casks to check
        id: find_casks
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

          if [ -n "${{ github.event.inputs.casks }}" ]; then
            echo "Checking specified casks: ${{ github.event.inputs.casks }}"
            echo "casks=$(echo '${{ github.event.inputs.casks }}' | tr ' ' '\n' | jq -R . | jq -cs .)" >> "$GITHUB_OUTPUT"
          else
            CASKS=$(find Casks -name "*.rb" -exec basename {} .rb \; | jq -R . | jq -cs .)
            echo "Found casks to check: $CASKS"
            echo "casks=$CASKS" >> "$GITHUB_OUTPUT"
          fi

      - name: Process casks
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          CASKS: ${{ steps.find_casks.outputs.casks }}
        shell: bash
        run: |
          echo "$CASKS" | jq -r '.[]' | while read -r CASK_NAME; do

            echo "::group::Processing: $CASK_NAME"
            CASK_PATH="Casks/$CASK_NAME.rb"

            if [ ! -f "$CASK_PATH" ]; then
              echo "::warning::Cask file not found: $CASK_PATH"
              continue
            fi

            # Run brew livecheck and capture JSON
            LIVECHECK_JSON=$(brew livecheck --tap "$TAP_URL" --cask "$CASK_PATH" --quiet --full-name --json 2>/dev/null)
            echo "livecheck result: $LIVECHECK_JSON"
            
            if [ $? -ne 0 ] || [ -z "$LIVECHECK_JSON" ]; then
              echo "::warning::brew livecheck failed for $CASK_NAME. Skipping."
              echo "::endgroup::"
              continue
            fi

            # Validate JSON structure
            if ! echo "$LIVECHECK_JSON" | jq -e '.[0].version' >/dev/null 2>&1; then
              echo "::warning::Invalid JSON structure from livecheck for $CASK_NAME. Skipping."
              echo "::endgroup::"
              continue
            fi

            # Extract fields
            CURRENT_VERSION=$(echo "$LIVECHECK_JSON" | jq -r '.[0].version.current // empty')
            LATEST_VERSION=$(echo "$LIVECHECK_JSON" | jq -r '.[0].version.latest // empty')

            if [ -z "$CURRENT_VERSION" ]; then
              echo "::warning::Missing current version in livecheck result for $CASK_NAME. Skipping."
              echo "::endgroup::"
              continue
            fi

            echo "üì¶ Current: $CURRENT_VERSION"
            echo "‚¨ÜÔ∏è  Latest:  $LATEST_VERSION"

            # Skip if up to date
            if [ "$LATEST_VERSION" == "$CURRENT_VERSION" ]; then
              echo "No update for $CASK_NAME ($CURRENT_VERSION ‚Üí $LATEST_VERSION)"
              continue
            fi

            BRANCH="bump-$CASK_NAME-$LATEST_VERSION"
            git checkout -B "$BRANCH"

            # Extract architecture-specific URL templates
            URL_ARM=$(awk '/on_arm/,/end/ { if ($1 == "url") { gsub(/",$/,"",$2); print $2 } }' "$CASK_PATH" | sed 's/"//g')
            URL_X64=$(awk '/on_intel/,/end/ { if ($1 == "url") { gsub(/",$/,"",$2); print $2 } }' "$CASK_PATH" | sed 's/"//g')

            # Fall back to the main url if architecture-specific blocks are not found
            if [ -z "$URL_ARM" ]; then
              URL_ARM=$(awk '/^[[:space:]]*url "/ { print $2; exit }' "$CASK_PATH" | sed 's/"//g')
            fi

            if [ -z "$URL_X64" ]; then
              URL_X64=$(awk '/^[[:space:]]*url "/ { print $2; exit }' "$CASK_PATH" | sed 's/"//g')
            fi

            # Replace placeholders
            URL_ARM="${URL_ARM//\#\{version\}/$LATEST_VERSION}"
            URL_X64="${URL_X64//\#\{version\}/$LATEST_VERSION}"

            echo "Downloading ARM binary from $URL_ARM"
            if ! curl -L -f -o arm.dmg "$URL_ARM"; then
              echo "::error::Failed to download ARM binary"
              rm -f arm.dmg
              echo "::endgroup::"
              continue
            fi

            echo "Downloading Intel binary from $URL_X64"
            if ! curl -L -f -o intel.dmg "$URL_X64"; then
              echo "::error::Failed to download Intel binary"
              rm -f intel.dmg
              echo "::endgroup::"
              continue
            fi

            # Calculate SHA256 checksums
            ARM_SHA=$(shasum -a 256 arm.dmg | awk '{print $1}')
            INTEL_SHA=$(shasum -a 256 intel.dmg | awk '{print $1}')

            echo "ARM SHA256: $ARM_SHA"
            echo "Intel SHA256: $INTEL_SHA"

            # Clean up
            rm -f arm.dmg intel.dmg

            # Update cask file version
            sed -i '' -E "s/^[[:space:]]*version \"[^\"]+\"/  version \"$LATEST_VERSION\"/" "$CASK_PATH"

            # Update sha256 checksums for arm and intel
            sed -i '' -E "/on_arm/,/end/ s/sha256 \".*\"/  sha256 \"$ARM_SHA\"/" "$CASK_PATH"
            sed -i '' -E "/on_intel/,/end/ s/sha256 \".*\"/  sha256 \"$INTEL_SHA\"/" "$CASK_PATH"

            echo "Installing local cask to verify: $CASK_PATH"
            if brew install --cask "./$CASK_PATH"; then
              git add "$CASK_PATH"
              git commit -m "$CASK_NAME: Update to version $LATEST_VERSION"
              git push -u origin "$BRANCH"

              PR_BODY="Auto-bumped $CASK_NAME to $LATEST_VERSION"
              PR_URL=$(gh pr create --title "$CASK_NAME: Update to version $LATEST_VERSION" \
                                    --body "$PR_BODY" \
                                    --base main \
                                    --head "$BRANCH")

              echo "PR created: $PR_URL"
              PR_NUMBER=$(basename "$PR_URL")
              
              MAX_RETRIES=10

              for ((i=1; i<=MAX_RETRIES; i++)); do
                MERGEABLE=$(gh pr view "$PR_NUMBER" --json mergeable -q '.mergeable' 2>/dev/null || echo "null")

                echo "Mergeable status attempt $i: $MERGEABLE"

                if [ "$MERGEABLE" == "MERGEABLE" ]; then
                  echo "PR is mergeable. Proceeding to auto-merge..."
                  gh pr merge "$PR_NUMBER" --auto --merge --delete-branch
                  break
                elif [ "$MERGEABLE" == "CONFLICTING" ]; then
                  echo "::warning::PR #$PR_NUMBER has merge conflicts. Skipping auto-merge."
                  break
                elif [ "$MERGEABLE" == "UNKNOWN" ] || [ -z "$MERGEABLE" ]; then
                  if [ "$i" -lt "$MAX_RETRIES" ]; then
                    echo "Mergeable status is not yet ready. Waiting 1 second..."
                    sleep 1
                  else
                    echo "::warning::Mergeable status still null after $MAX_RETRIES attempts. Skipping auto-merge."
                  fi
                else
                  echo "::warning::Unexpected mergeable status: $MERGEABLE"
                  break
                fi
              done

            else
              echo "::error::Install failed. Reverting changes."
              git checkout main
              git branch -D "$BRANCH" || true
              echo "::endgroup::"
              continue
            fi

            echo "::endgroup::"

          done

