name: Auto Bump Cask Versions

on:
  schedule:
    - cron: '0 12 * * *'
  workflow_dispatch:
    inputs:
      tap_name:
        description: 'Tap name (e.g., SoloAntonio/cartero)'
        required: false
        default: 'SoloAntonio/cartero'
      tap_url:
        description: 'Tap URL'
        required: false
        default: 'https://github.com/SoloAntonio/homebrew-cartero'
      casks:
        description: 'Cask names to check (space separated, leave empty for all)'
        required: false
        default: ''

env:
  TAP_NAME: ${{ github.event.inputs.tap_name || 'SoloAntonio/cartero' }}
  TAP_URL: ${{ github.event.inputs.tap_url || 'https://github.com/SoloAntonio/homebrew-cartero' }}

jobs:
  auto-bump:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Homebrew tap
        run: |
          echo "Using tap: ${{ env.TAP_NAME }} (${{ env.TAP_URL }})"
          brew tap "${{ env.TAP_NAME }}" "${{ env.TAP_URL }}"
          brew developer on

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -z "$GH_TOKEN" ]; then
            echo "::error::GH_TOKEN is not set"
            exit 1
          fi
          gh auth status || gh auth login --with-token <<< "$GH_TOKEN"
          
      - name: Find casks to check
        id: find_casks
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

          if [ -n "${{ github.event.inputs.casks }}" ]; then
            echo "Checking specified casks: ${{ github.event.inputs.casks }}"
            echo "casks=$(echo '${{ github.event.inputs.casks }}' | tr ' ' '\n' | jq -R . | jq -cs .)" >> $GITHUB_OUTPUT
          else
            CASKS=$(find Casks -name "*.rb" -exec basename {} .rb \;)
            echo "Found casks to check: $CASKS"
            echo "casks=$(echo "$CASKS" | tr ' ' '\n' | jq -R . | jq -cs .)" >> $GITHUB_OUTPUT
          fi

      - name: Process casks
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          CASKS: ${{ steps.find_casks.outputs.casks }}
        run: |
          echo "$CASKS" | jq -r '.[]' | while read -r CASK_NAME; do
            echo "Processing: $CASK_NAME"
            CASK_PATH="Casks/$CASK_NAME.rb"

            CURRENT_VERSION=$(grep -m 1 'version "' "$CASK_PATH" | awk -F'"' '{print $2}')
            echo "Current version: $CURRENT_VERSION"

            LIVECHECK_JSON=$(brew livecheck --cask --quiet --newer-only --full-name --json "$CASK_NAME")
            LATEST_VERSION=$(echo "$LIVECHECK_JSON" | jq -r '.[0].version.latest // empty')

            if [ -z "$LATEST_VERSION" ]; then
              echo "No newer version found for $CASK_NAME, skipping."
              continue
            fi

            if [ "$LATEST_VERSION" = "$CURRENT_VERSION" ]; then
              echo "Already at latest version for $CASK_NAME ($CURRENT_VERSION)"
              continue
            fi

            BRANCH="bump-$CASK_NAME-$LATEST_VERSION"
            git checkout -B "$BRANCH"

            cp "$CASK_PATH" "$CASK_PATH.bak"

            # Fetch and capture SHA for ARM (native architecture on macos-latest)
            echo "Fetching cask for ARM..."
            ARM_FETCH=$(brew fetch --cask --force "$CASK_NAME" 2>&1)
            ARM_SHA=$(echo "$ARM_FETCH" | grep "SHA256:" | tail -1 | awk '{print $2}')
            echo "ARM SHA256: $ARM_SHA"

            # Fetch and capture SHA for Intel using Rosetta
            echo "Fetching cask for Intel (Rosetta)..."
            INTEL_FETCH=$(arch -x86_64 brew fetch --cask --force "$CASK_NAME" 2>&1)
            INTEL_SHA=$(echo "$INTEL_FETCH" | grep "SHA256:" | tail -1 | awk '{print $2}')
            echo "Intel SHA256: $INTEL_SHA"

            # Fallback if architecture-specific SHAs are not defined
            if [ -z "$ARM_SHA" ] || [ -z "$INTEL_SHA" ]; then
              UNIVERSAL_SHA=${ARM_SHA:-$INTEL_SHA}
              ARM_SHA=$UNIVERSAL_SHA
              INTEL_SHA=$UNIVERSAL_SHA
            fi

            # Update version and checksums in cask file - sed assumes specific format, adjust as needed
            sed -i '' -E \
              -e "s/version \"[^\"]+\"/version \"$LATEST_VERSION\"/" \
              -e "s/sha256 arm:[[:space:]]*\"[^\"]+\"/sha256 arm:   \"$ARM_SHA\"/" \
              -e "s/intel:[[:space:]]*\"[^\"]+\"/intel: \"$INTEL_SHA\"/" \
              "$CASK_PATH"

            if brew install --cask "$CASK_NAME"; then
              git add "$CASK_PATH"
              git commit -m "$CASK_NAME: Update to version $LATEST_VERSION"
              git push -u origin "$BRANCH"

              PR_BODY="Auto-bumped $CASK_NAME to $LATEST_VERSION"
              PR_URL=$(gh pr create --title "$CASK_NAME: Update to version $LATEST_VERSION" \
                                    --body "$PR_BODY" \
                                    --base main \
                                    --head "$BRANCH")

              echo "PR created: $PR_URL"

              PR_NUMBER=$(basename "$PR_URL")
              if gh pr view "$PR_NUMBER" --json mergeable | jq -e '.mergeable == true' >/dev/null; then
                echo "Auto-merging PR #$PR_NUMBER"
                gh pr merge "$PR_NUMBER" --auto --merge
              else
                echo "PR #$PR_NUMBER is not auto-mergeable"
              fi
            else
              echo "Install failed for $CASK_NAME. Reverting changes..."

              mv "$CASK_PATH.bak" "$CASK_PATH"
              git checkout main
              git branch -D "$BRANCH"
            fi

            # Cleanup
            git checkout main
            git branch -D "$BRANCH" || true
          done
