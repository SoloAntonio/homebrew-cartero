name: Auto Bump Cask Versions

on:
  schedule:
    - cron: '0 12 * * *'
  workflow_dispatch:
    inputs:
      tap_name:
        description: 'Tap name (e.g., SoloAntonio/cartero)'
        required: false
        default: 'soloantonio/cartero'
      tap_url:
        description: 'Tap URL'
        required: false
        default: 'https://github.com/SoloAntonio/homebrew-cartero'
      casks:
        description: 'Cask names to check (space separated, leave empty for all)'
        required: false
        default: ''

env:
  TAP_NAME: ${{ github.event.inputs.tap_name || 'soloantonio/cartero' }}
  TAP_URL: ${{ github.event.inputs.tap_url || 'https://github.com/SoloAntonio/homebrew-cartero' }}

jobs:
  auto-bump:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Setup Homebrew tap
        run: |
          echo "Using tap: ${{ env.TAP_NAME }} (${{ env.TAP_URL }})"
          brew tap ${{ env.TAP_NAME }} ${{ env.TAP_URL }}
          brew update
          brew developer on

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -z "$GH_TOKEN" ]; then
            echo "::error::GH_TOKEN is not set"
            exit 1
          fi
          gh auth status || gh auth login --with-token <<< "$GH_TOKEN"

      - name: Find casks to check
        id: find_casks
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

          if [ -n "${{ github.event.inputs.casks }}" ]; then
            echo "Checking specified casks: ${{ github.event.inputs.casks }}"
            echo "casks=$(echo '${{ github.event.inputs.casks }}' | tr ' ' '\n' | jq -R . | jq -cs .)" >> "$GITHUB_OUTPUT"
          else
            CASKS=$(find Casks -name "*.rb" -exec basename {} .rb \; | jq -R . | jq -cs .)
            echo "Found casks to check: $CASKS"
            echo "casks=$CASKS" >> "$GITHUB_OUTPUT"
          fi

      - name: Process casks
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          CASKS: ${{ steps.find_casks.outputs.casks }}
        shell: bash
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

          echo "$CASKS" | jq -r '.[]' > cask_list.txt

          while IFS= read -r CASK_NAME; do
            echo "Processing: $CASK_NAME"
            CASK_PATH="Casks/$CASK_NAME.rb"

            CURRENT_VERSION=$(grep -m 1 'version "' "$CASK_PATH" | awk -F'"' '{print $2}')
            echo "Current version: $CURRENT_VERSION"

            LIVECHECK_JSON=$(brew livecheck --cask --quiet --newer-only --full-name --json "$CASK_NAME")
            LATEST_VERSION=$(echo "$LIVECHECK_JSON" | jq -r '.[0].version.latest // empty')

            if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "$CURRENT_VERSION" ]; then
              echo "No update for $CASK_NAME (current: $CURRENT_VERSION, latest: $LATEST_VERSION)"
              continue
            fi

            BRANCH="bump-$CASK_NAME-$LATEST_VERSION"
            git checkout -B "$BRANCH"
            cp "$CASK_PATH" "$CASK_PATH.bak"

            # Extract first url line
            URL_LINE=$(grep -m 1 '^url "' "$CASK_PATH")

            # Extract the URL inside the quotes, remove trailing comma
            URL_TEMPLATE=$(echo "$URL_LINE" | sed -E 's/^[[:space:]]*url "([^"]+)",$/\1/')

            # Replace version placeholder #{version} with actual LATEST_VERSION
            URL_TEMPLATE="${URL_TEMPLATE//\#\{version\}/$LATEST_VERSION}"

            # Replace arch placeholder #{arch} for arm and x64
            URL_ARM="${URL_TEMPLATE//\#\{arch\}/arm64}"
            URL_X64="${URL_TEMPLATE//\#\{arch\}/x64}"

            echo "Downloading ARM binary from $URL_ARM"
            curl -L -o arm.dmg "$URL_ARM"

            echo "Downloading Intel binary from $URL_X64"
            curl -L -o intel.dmg "$URL_X64"

            # Calculate SHA256 checksums
            ARM_SHA=$(shasum -a 256 arm.dmg | awk '{print $1}')
            INTEL_SHA=$(shasum -a 256 intel.dmg | awk '{print $1}')

            echo "ARM SHA256: $ARM_SHA"
            echo "Intel SHA256: $INTEL_SHA"

            # Clean up
            rm arm.dmg intel.dmg

            # Update cask file version
            sed -i '' -E "s/^[[:space:]]*version \"[^\"]+\"/  version \"$LATEST_VERSION\"/" "$CASK_PATH"

            # Update sha256 checksums for arm and intel
            sed -i '' -E "s/^(  sha256 arm:[[:space:]]+\")[a-f0-9]+\"/\1$ARM_SHA\"/" "$CASK_PATH"
            sed -i '' -E "s/^(         intel:[[:space:]]+\")[a-f0-9]+\"/\1$INTEL_SHA\"/" "$CASK_PATH"

            echo "Installing local cask to verify: $CASK_PATH"
            if brew install --cask "./$CASK_PATH"; then
              git add "$CASK_PATH"
              git commit -m "$CASK_NAME: Update to version $LATEST_VERSION"
              git push -u origin "$BRANCH"

              PR_BODY="Auto-bumped $CASK_NAME to $LATEST_VERSION"
              PR_URL=$(gh pr create --title "$CASK_NAME: Update to version $LATEST_VERSION" \
                                    --body "$PR_BODY" \
                                    --base main \
                                    --head "$BRANCH")

              echo "PR created: $PR_URL"

              PR_NUMBER=$(basename "$PR_URL")
              if gh pr view "$PR_NUMBER" --json mergeable | jq -e '.mergeable == true' >/dev/null; then
                echo "Auto-merging PR #$PR_NUMBER"
                gh pr merge "$PR_NUMBER" --auto --merge
              else
                echo "PR #$PR_NUMBER is not auto-mergeable"
              fi
            else
              echo "Install failed. Reverting changes."
              mv "$CASK_PATH.bak" "$CASK_PATH"
              git checkout main
              git branch -D "$BRANCH" || true
              continue
            fi

            git checkout main
            git branch -D "$BRANCH" || true
          done < cask_list.txt
